name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Run ESLint
        run: npm run lint || echo "ESLint issues found"

      - name: Run TypeScript check
        run: npm run type-check || echo "TypeScript issues found"

  test:
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: mysql://root:root@localhost:3306/test_db
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_db
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Create .env file
        run: echo "DATABASE_URL=$DATABASE_URL" > .env

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Setup database schema
        run: npx prisma db push --force-reset

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Build Next.js application
        run: npm run build

      - name: Start Next.js server
        run: |
          npm run start & 
          sleep 10
          curl --retry 5 --retry-delay 2 --retry-connrefused http://localhost:3000/ || true
        timeout-minutes: 2

      - name: Run tests
        run: npm run test

  build:
    runs-on: ubuntu-latest
    needs: [lint, test]
    env:
      DATABASE_URL: mysql://root:root@localhost:3306/test_db
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Build application
        run: npm run build

  docker:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          tags: todo-app:test
          cache-from: type=gha
          cache-to: type=gha,mode=max